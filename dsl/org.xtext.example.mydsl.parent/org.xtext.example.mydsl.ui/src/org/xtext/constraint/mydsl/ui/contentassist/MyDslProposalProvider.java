/*
 * generated by Xtext 2.26.0-SNAPSHOT
 */
package org.xtext.constraint.mydsl.ui.contentassist;

import java.util.ArrayList;
import java.util.Iterator;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.xtext.constraint.mydsl.loading.loadEsperModel;
import org.xtext.constraint.mydsl.myDsl.ComplexInitialization;
import org.xtext.constraint.mydsl.myDsl.PatternInitialization;
import org.xtext.constraint.mydsl.myDsl.QueryInitialization;

import at.jku.se.mosumo.dronology.constraint.esper.Constraint;
import at.jku.se.mosumo.dronology.constraint.esper.EsperEngine;
import at.jku.se.mosumo.dronology.constraint.esper.Variable;

/**
 * See
 * https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#content-assist
 * on how to customize the content assistant.
 */
public class MyDslProposalProvider extends AbstractMyDslProposalProvider {
	public static String constraintname = null;

	public void completeQueryInitialization_InputStatements(EObject model, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		constraintname = ((QueryInitialization) model).getName();
	}

	@Override
	public void completePatternInitialization_InputStatements(EObject model, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		constraintname = ((PatternInitialization) model).getName();

	}

	@Override
	public void completeComplexInitialization_InputStatements(EObject model, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//		if (model instanceof InputStatement)
//		{
//			constraintname=((InputStatement) model).getName();
//		}
		constraintname = ((ComplexInitialization) model).getName();
	}

	@Override
	public void completeQueryInitialization_Name(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		EsperEngine instance = loadEsperModel.load();
		// We could also iterate over the Constraints...
		for (Iterator<Constraint> iterator = instance.getConstraint().iterator(); iterator.hasNext();) {
			Constraint c = iterator.next();
			// put ever constraint name as an proposal option
			acceptor.accept(createCompletionProposal(c.getName(), context));
		}
	}

	@Override
	public void completePatternInitialization_Name(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
//		  super.completePatternInitialization_Name(model, assignment, context, acceptor);
		EsperEngine instance = loadEsperModel.load();
		// We could also iterate over the Constraints...
		for (Iterator<Constraint> iterator = instance.getConstraint().iterator(); iterator.hasNext();) {
			Constraint c = iterator.next();
			// put ever constraint name as an proposal option
			acceptor.accept(createCompletionProposal(c.getName(), context));
		}
	}

	@Override
	public void completeComplexInitialization_Name(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
//		  super.completeComplexInitialization_Name(model, assignment, context, acceptor);
//		if (model instanceof ComplexInitialization)
//		{
//			constraintname=((ComplexInitialization) model).getName();
//			String s=((ComplexInitialization) model).getName();
//			acceptor.accept(createCompletionProposal(s, context));
//		}

		ArrayList<String> array = new ArrayList<String>();
		EsperEngine instance = loadEsperModel.load();
		array = checkConstraintName(instance);
		for (int i = 0; i < array.size(); i++) {
			acceptor.accept(createCompletionProposal(array.get(i), context));
		}

	}

	@Override
	public void completeInputStatement_Property(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		EsperEngine e = loadEsperModel.load();

		// Iteration over the constraints
		for (Iterator<Constraint> iterator1 = e.getConstraint().iterator(); iterator1.hasNext();) {
			Constraint c = iterator1.next();
			if (c.getName().equals(constraintname)) {
				for (Iterator<Variable> iterator2 = c.getEvent().getVariable().iterator(); iterator2.hasNext();) {
					Variable v = iterator2.next();
					acceptor.accept(createCompletionProposal(String.format("\"%s\"", v.getName()), context));
				}
			}

		}

//		if (model instanceof InputStatement)
//		{
//			String s=((InputStatement) model).getName();
//			acceptor.accept(createCompletionProposal(s, context));
//		}

	}

	public static ArrayList<String> checkConstraintName(EsperEngine instance) {
		ArrayList<String> elements = new ArrayList<String>();
		// iterate over the constraints in the EsperEngine model and return an array
		for (Iterator<Constraint> iterator = instance.getConstraint().iterator(); iterator.hasNext();) {
			Constraint c = iterator.next();
			elements.add(c.getName());
		}
		return elements;
	}

}
