/*
 * generated by Xtext 2.26.0-SNAPSHOT
 */
package org.xtext.constraint.mydsl.validation;

import java.util.Iterator;

import org.eclipse.xtext.validation.Check;
import org.xtext.constraint.mydsl.loading.loadEsperModel;
import org.xtext.constraint.mydsl.myDsl.ComplexInitialization;
import org.xtext.constraint.mydsl.myDsl.InputStatement;
import org.xtext.constraint.mydsl.myDsl.MyDslPackage;
import org.xtext.constraint.mydsl.myDsl.PatternInitialization;
import org.xtext.constraint.mydsl.myDsl.QueryInitialization;

import at.jku.se.mosumo.dronology.constraint.esper.Constraint;
import at.jku.se.mosumo.dronology.constraint.esper.EsperEngine;
import at.jku.se.mosumo.dronology.constraint.esper.Variable;
//import org.xtext.constraint.mydsl.ui.contentassist.MyDslProposalProvider;
/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class MyDslValidator extends AbstractMyDslValidator {
	
	public static final String INVALID_NAME = "invalidName";
	public static final String INVALID_NAME2 = "invalidName";
	public static String constraintname = null;

	
	@Check
	public void checkConstraintName(PatternInitialization p) {

		EsperEngine instance = loadEsperModel.load();
		boolean status = false;
		status = checkRealtimePattern(p, instance);
		if (status == false) {
			warning("This Constraint name dosn't exist in the model", MyDslPackage.Literals.PATTERN_INITIALIZATION__NAME,
					INVALID_NAME);
		}

	}

	@Check
	public void checkConstraintName(ComplexInitialization c) {

		EsperEngine instance = loadEsperModel.load();
		boolean status = false;
		status = checkComplexPattern(c, instance);
		if (status == false) {
			warning("This Constraint dosn't exist in the model", MyDslPackage.Literals.COMPLEX_INITIALIZATION__NAME,
					INVALID_NAME);
		}

	}
	@Check
	public void checkConstraintName(QueryInitialization c) {

		EsperEngine instance = loadEsperModel.load();
		boolean status = false;
		status = checkSimplePattern(c, instance);
		if (status == false) {
			warning("This Constraint name dosn't exist in the model", MyDslPackage.Literals.QUERY_INITIALIZATION__NAME,
					INVALID_NAME);
		}

	}
	
	//this method checks the name of the property for a specific constraint defined in the Esper model
	@Check
	public void checkProperty(InputStatement i) {
		boolean status = false;
		EsperEngine e = loadEsperModel.load();
		// Iteration over the constraint
		for (Iterator<Constraint> iterator1 = e.getConstraint().iterator(); iterator1.hasNext();) {
			Constraint c = iterator1.next();
			if (c.getName().equals(constraintname)) {
				for (Iterator<Variable> iterator2 = c.getEvent().getVariable().iterator(); iterator2.hasNext();) {
					Variable v=iterator2.next();
					if(i.getProperty().equals(v.getName()))
					{
					status=true;
					}
					}
				}
			}

		if (status == false) {
			warning("This property doesn't exist in the constraint "+constraintname, MyDslPackage.Literals.INPUT_STATEMENT__PROPERTY,
					INVALID_NAME);
		}
	}

	
	

	public static boolean checkRealtimePattern(PatternInitialization p, EsperEngine instance) {
		// Loading the existing model
		boolean status = false;
		EsperEngine e = loadEsperModel.load();
		// Iteration over the constraint
		for (Iterator<Constraint> iterator = e.getConstraint().iterator(); iterator.hasNext();) {
			Constraint c = iterator.next();
			if (p.getName().toString().equals(c.getName().toString())) {
				status = true;
				constraintname=c.getName().toString();
			}
		}
		return status;
	}
	public static boolean checkComplexPattern(ComplexInitialization complex, EsperEngine instance) {
		// Loading the existing model
		boolean status = false;
		EsperEngine e = loadEsperModel.load();
		// Iteration over the constraint
		for (Iterator<Constraint> iterator = e.getConstraint().iterator(); iterator.hasNext();) {
			Constraint c = iterator.next();
			if (complex.getName().toString().equals(c.getName().toString())) {
				status = true;
				constraintname=c.getName().toString();
			}
		}
		return status;
	}
	
	
	public static boolean checkSimplePattern(QueryInitialization q, EsperEngine instance) {
		// Loading the existing model
		boolean status = false;
		EsperEngine e = loadEsperModel.load();
		// Iteration over the constraint
		for (Iterator<Constraint> iterator = e.getConstraint().iterator(); iterator.hasNext();) {
			Constraint c = iterator.next();
			if (q.getName().toString().equals(c.getName().toString())) {
				status = true;
				constraintname=c.getName().toString();
			}
		}
		return status;
	}
}
