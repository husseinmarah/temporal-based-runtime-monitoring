/*
 * generated by Xtext 2.26.0-SNAPSHOT
 */
package org.xtext.constraint.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.constraint.mydsl.myDsl.ComplexInitialization;
import org.xtext.constraint.mydsl.myDsl.ComplexPatternOptions;
import org.xtext.constraint.mydsl.myDsl.ComplexPatternStatements;
import org.xtext.constraint.mydsl.myDsl.ComplexPatternType;
import org.xtext.constraint.mydsl.myDsl.InputStatement;
import org.xtext.constraint.mydsl.myDsl.MaxDuration;
import org.xtext.constraint.mydsl.myDsl.MinDuration;
import org.xtext.constraint.mydsl.myDsl.MyDslPackage;
import org.xtext.constraint.mydsl.myDsl.NumberLiteral;
import org.xtext.constraint.mydsl.myDsl.OccurenceAtLeast;
import org.xtext.constraint.mydsl.myDsl.OccurenceAtMost;
import org.xtext.constraint.mydsl.myDsl.OccurenceAtNotSpecificTime;
import org.xtext.constraint.mydsl.myDsl.OccurenceAtTime;
import org.xtext.constraint.mydsl.myDsl.PatternInitialization;
import org.xtext.constraint.mydsl.myDsl.PatternModel;
import org.xtext.constraint.mydsl.myDsl.PatternOptions;
import org.xtext.constraint.mydsl.myDsl.PatternStatement;
import org.xtext.constraint.mydsl.myDsl.PatternType;
import org.xtext.constraint.mydsl.myDsl.QueryInitialization;
import org.xtext.constraint.mydsl.myDsl.StringLiteral;
import org.xtext.constraint.mydsl.myDsl.TextLiteral;
import org.xtext.constraint.mydsl.myDsl.TimeWindow;
import org.xtext.constraint.mydsl.myDsl.ValueOptions;
import org.xtext.constraint.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.COMPLEX_INITIALIZATION:
				sequence_ComplexInitialization(context, (ComplexInitialization) semanticObject); 
				return; 
			case MyDslPackage.COMPLEX_PATTERN_OPTIONS:
				sequence_ComplexPatternOptions(context, (ComplexPatternOptions) semanticObject); 
				return; 
			case MyDslPackage.COMPLEX_PATTERN_STATEMENTS:
				sequence_ComplexPatternStatements(context, (ComplexPatternStatements) semanticObject); 
				return; 
			case MyDslPackage.COMPLEX_PATTERN_TYPE:
				sequence_ComplexPatternType(context, (ComplexPatternType) semanticObject); 
				return; 
			case MyDslPackage.INPUT_STATEMENT:
				sequence_InputStatement(context, (InputStatement) semanticObject); 
				return; 
			case MyDslPackage.MAX_DURATION:
				sequence_MaxDuration(context, (MaxDuration) semanticObject); 
				return; 
			case MyDslPackage.MIN_DURATION:
				sequence_MinDuration(context, (MinDuration) semanticObject); 
				return; 
			case MyDslPackage.NUMBER_LITERAL:
				sequence_NumberLiteral(context, (NumberLiteral) semanticObject); 
				return; 
			case MyDslPackage.OCCURENCE_AT_LEAST:
				sequence_OccurenceAtLeast(context, (OccurenceAtLeast) semanticObject); 
				return; 
			case MyDslPackage.OCCURENCE_AT_MOST:
				sequence_OccurenceAtMost(context, (OccurenceAtMost) semanticObject); 
				return; 
			case MyDslPackage.OCCURENCE_AT_NOT_SPECIFIC_TIME:
				sequence_OccurenceAtNotSpecificTime(context, (OccurenceAtNotSpecificTime) semanticObject); 
				return; 
			case MyDslPackage.OCCURENCE_AT_TIME:
				sequence_OccurenceAtTime(context, (OccurenceAtTime) semanticObject); 
				return; 
			case MyDslPackage.PATTERN_INITIALIZATION:
				sequence_PatternInitialization(context, (PatternInitialization) semanticObject); 
				return; 
			case MyDslPackage.PATTERN_MODEL:
				sequence_PatternModel(context, (PatternModel) semanticObject); 
				return; 
			case MyDslPackage.PATTERN_OPTIONS:
				sequence_PatternOptions(context, (PatternOptions) semanticObject); 
				return; 
			case MyDslPackage.PATTERN_STATEMENT:
				sequence_PatternStatement(context, (PatternStatement) semanticObject); 
				return; 
			case MyDslPackage.PATTERN_TYPE:
				sequence_PatternType(context, (PatternType) semanticObject); 
				return; 
			case MyDslPackage.QUERY_INITIALIZATION:
				sequence_QueryInitialization(context, (QueryInitialization) semanticObject); 
				return; 
			case MyDslPackage.STRING_LITERAL:
				sequence_StringLiteral(context, (StringLiteral) semanticObject); 
				return; 
			case MyDslPackage.TEXT_LITERAL:
				sequence_TextLiteral(context, (TextLiteral) semanticObject); 
				return; 
			case MyDslPackage.TIME_WINDOW:
				sequence_TimeWindow(context, (TimeWindow) semanticObject); 
				return; 
			case MyDslPackage.VALUE_OPTIONS:
				sequence_ValueOptions(context, (ValueOptions) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ComplexInitialization returns ComplexInitialization
	 *
	 * Constraint:
	 *     (name=ID timeWindow=TimeWindow? inputStatements+=InputStatement+ complexPatternStatements=ComplexPatternStatements)
	 */
	protected void sequence_ComplexInitialization(ISerializationContext context, ComplexInitialization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ComplexPatternOptions returns ComplexPatternOptions
	 *
	 * Constraint:
	 *     (seceondEvent=[InputStatement|ID] greedyQuantifiers=GreedyQuantifiers?)
	 */
	protected void sequence_ComplexPatternOptions(ISerializationContext context, ComplexPatternOptions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ComplexPatternStatements returns ComplexPatternStatements
	 *
	 * Constraint:
	 *     complexPatternType=ComplexPatternType
	 */
	protected void sequence_ComplexPatternStatements(ISerializationContext context, ComplexPatternStatements semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.COMPLEX_PATTERN_STATEMENTS__COMPLEX_PATTERN_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.COMPLEX_PATTERN_STATEMENTS__COMPLEX_PATTERN_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComplexPatternStatementsAccess().getComplexPatternTypeComplexPatternTypeParserRuleCall_2_0(), semanticObject.getComplexPatternType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ComplexPatternType returns ComplexPatternType
	 *
	 * Constraint:
	 *     (firstEvent=[InputStatement|ID] greedyQuantifiers=GreedyQuantifiers? complexPatternOptions+=ComplexPatternOptions+)
	 */
	protected void sequence_ComplexPatternType(ISerializationContext context, ComplexPatternType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InputStatement returns InputStatement
	 *
	 * Constraint:
	 *     (name=ID Property=STRING comparisonOperator=ComparisonOperator value=ValueOptions)
	 */
	protected void sequence_InputStatement(ISerializationContext context, InputStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.INPUT_STATEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.INPUT_STATEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.INPUT_STATEMENT__PROPERTY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.INPUT_STATEMENT__PROPERTY));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.INPUT_STATEMENT__COMPARISON_OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.INPUT_STATEMENT__COMPARISON_OPERATOR));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.INPUT_STATEMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.INPUT_STATEMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInputStatementAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInputStatementAccess().getPropertySTRINGTerminalRuleCall_3_0(), semanticObject.getProperty());
		feeder.accept(grammarAccess.getInputStatementAccess().getComparisonOperatorComparisonOperatorEnumRuleCall_6_0(), semanticObject.getComparisonOperator());
		feeder.accept(grammarAccess.getInputStatementAccess().getValueValueOptionsParserRuleCall_7_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Timer returns MaxDuration
	 *     MaxDuration returns MaxDuration
	 *
	 * Constraint:
	 *     (timerType='MaxDuration' time=INT timeUnit=TimeUnit)
	 */
	protected void sequence_MaxDuration(ISerializationContext context, MaxDuration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TIMER__TIMER_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TIMER__TIMER_TYPE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TIMER__TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TIMER__TIME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TIMER__TIME_UNIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TIMER__TIME_UNIT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMaxDurationAccess().getTimerTypeMaxDurationKeyword_0_0(), semanticObject.getTimerType());
		feeder.accept(grammarAccess.getMaxDurationAccess().getTimeINTTerminalRuleCall_2_0(), semanticObject.getTime());
		feeder.accept(grammarAccess.getMaxDurationAccess().getTimeUnitTimeUnitEnumRuleCall_3_0(), semanticObject.getTimeUnit());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Timer returns MinDuration
	 *     MinDuration returns MinDuration
	 *
	 * Constraint:
	 *     (timerType='MinDuration' time=INT timeUnit=TimeUnit)
	 */
	protected void sequence_MinDuration(ISerializationContext context, MinDuration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TIMER__TIMER_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TIMER__TIMER_TYPE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TIMER__TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TIMER__TIME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TIMER__TIME_UNIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TIMER__TIME_UNIT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMinDurationAccess().getTimerTypeMinDurationKeyword_0_0(), semanticObject.getTimerType());
		feeder.accept(grammarAccess.getMinDurationAccess().getTimeINTTerminalRuleCall_2_0(), semanticObject.getTime());
		feeder.accept(grammarAccess.getMinDurationAccess().getTimeUnitTimeUnitEnumRuleCall_3_0(), semanticObject.getTimeUnit());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NumberLiteral returns NumberLiteral
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_NumberLiteral(ISerializationContext context, NumberLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.NUMBER_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.NUMBER_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberLiteralAccess().getValueINTTerminalRuleCall_0_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OccurenceAtLeast returns OccurenceAtLeast
	 *
	 * Constraint:
	 *     (seceondEvent=[InputStatement|ID] minDuration=MinDuration)
	 */
	protected void sequence_OccurenceAtLeast(ISerializationContext context, OccurenceAtLeast semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.OCCURENCE_AT_LEAST__SECEOND_EVENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.OCCURENCE_AT_LEAST__SECEOND_EVENT));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.OCCURENCE_AT_LEAST__MIN_DURATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.OCCURENCE_AT_LEAST__MIN_DURATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOccurenceAtLeastAccess().getSeceondEventInputStatementIDTerminalRuleCall_1_0_1(), semanticObject.eGet(MyDslPackage.Literals.OCCURENCE_AT_LEAST__SECEOND_EVENT, false));
		feeder.accept(grammarAccess.getOccurenceAtLeastAccess().getMinDurationMinDurationParserRuleCall_4_0(), semanticObject.getMinDuration());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OccurenceAtMost returns OccurenceAtMost
	 *
	 * Constraint:
	 *     (seceondEvent=[InputStatement|ID] maxDuration=MaxDuration)
	 */
	protected void sequence_OccurenceAtMost(ISerializationContext context, OccurenceAtMost semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.OCCURENCE_AT_MOST__SECEOND_EVENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.OCCURENCE_AT_MOST__SECEOND_EVENT));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.OCCURENCE_AT_MOST__MAX_DURATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.OCCURENCE_AT_MOST__MAX_DURATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOccurenceAtMostAccess().getSeceondEventInputStatementIDTerminalRuleCall_1_0_1(), semanticObject.eGet(MyDslPackage.Literals.OCCURENCE_AT_MOST__SECEOND_EVENT, false));
		feeder.accept(grammarAccess.getOccurenceAtMostAccess().getMaxDurationMaxDurationParserRuleCall_4_0(), semanticObject.getMaxDuration());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OccurenceAtNotSpecificTime returns OccurenceAtNotSpecificTime
	 *
	 * Constraint:
	 *     seceondEvent=[InputStatement|ID]
	 */
	protected void sequence_OccurenceAtNotSpecificTime(ISerializationContext context, OccurenceAtNotSpecificTime semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.OCCURENCE_AT_NOT_SPECIFIC_TIME__SECEOND_EVENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.OCCURENCE_AT_NOT_SPECIFIC_TIME__SECEOND_EVENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOccurenceAtNotSpecificTimeAccess().getSeceondEventInputStatementIDTerminalRuleCall_1_0_1(), semanticObject.eGet(MyDslPackage.Literals.OCCURENCE_AT_NOT_SPECIFIC_TIME__SECEOND_EVENT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OccurenceAtTime returns OccurenceAtTime
	 *
	 * Constraint:
	 *     (minDuration=MinDuration | maxDuration=MaxDuration)
	 */
	protected void sequence_OccurenceAtTime(ISerializationContext context, OccurenceAtTime semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PatternInitialization returns PatternInitialization
	 *
	 * Constraint:
	 *     (name=ID timeWindow=TimeWindow? inputStatements+=InputStatement+ patternStatements=PatternStatement)
	 */
	protected void sequence_PatternInitialization(ISerializationContext context, PatternInitialization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PatternModel returns PatternModel
	 *
	 * Constraint:
	 *     (elements=PatternInitialization | elements=QueryInitialization | elements=ComplexInitialization)
	 */
	protected void sequence_PatternModel(ISerializationContext context, PatternModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PatternOptions returns PatternOptions
	 *
	 * Constraint:
	 *     (occurenceAtLeast=OccurenceAtLeast | occurenceAtMost=OccurenceAtMost | occurenceAtNotSpecificTime=OccurenceAtNotSpecificTime)
	 */
	protected void sequence_PatternOptions(ISerializationContext context, PatternOptions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PatternStatement returns PatternStatement
	 *
	 * Constraint:
	 *     patternType=PatternType
	 */
	protected void sequence_PatternStatement(ISerializationContext context, PatternStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PATTERN_STATEMENT__PATTERN_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PATTERN_STATEMENT__PATTERN_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPatternStatementAccess().getPatternTypePatternTypeParserRuleCall_2_0(), semanticObject.getPatternType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PatternType returns PatternType
	 *
	 * Constraint:
	 *     (firstEvent=[InputStatement|ID] patternOptions+=PatternOptions+)
	 */
	protected void sequence_PatternType(ISerializationContext context, PatternType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QueryInitialization returns QueryInitialization
	 *
	 * Constraint:
	 *     (name=ID timeWindow=TimeWindow? inputStatements=InputStatement)
	 */
	protected void sequence_QueryInitialization(ISerializationContext context, QueryInitialization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StringLiteral returns StringLiteral
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_StringLiteral(ISerializationContext context, StringLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.STRING_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.STRING_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TextLiteral returns TextLiteral
	 *
	 * Constraint:
	 *     value=ID
	 */
	protected void sequence_TextLiteral(ISerializationContext context, TextLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TEXT_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TEXT_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTextLiteralAccess().getValueIDTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TimeWindow returns TimeWindow
	 *
	 * Constraint:
	 *     (time=INT timeUnit=TimeUnit)
	 */
	protected void sequence_TimeWindow(ISerializationContext context, TimeWindow semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TIME_WINDOW__TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TIME_WINDOW__TIME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TIME_WINDOW__TIME_UNIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TIME_WINDOW__TIME_UNIT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimeWindowAccess().getTimeINTTerminalRuleCall_3_0(), semanticObject.getTime());
		feeder.accept(grammarAccess.getTimeWindowAccess().getTimeUnitTimeUnitEnumRuleCall_4_0(), semanticObject.getTimeUnit());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValueOptions returns ValueOptions
	 *
	 * Constraint:
	 *     (stringLiteral=StringLiteral | numberLiteral=NumberLiteral | textLiteral=TextLiteral)
	 */
	protected void sequence_ValueOptions(ISerializationContext context, ValueOptions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
