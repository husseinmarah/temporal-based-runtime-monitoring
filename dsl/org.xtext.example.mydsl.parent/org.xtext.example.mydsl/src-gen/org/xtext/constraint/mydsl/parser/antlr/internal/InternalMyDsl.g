/*
 * generated by Xtext 2.26.0-SNAPSHOT
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.constraint.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.constraint.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.constraint.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "PatternModel";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulePatternModel
entryRulePatternModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternModelRule()); }
	iv_rulePatternModel=rulePatternModel
	{ $current=$iv_rulePatternModel.current; }
	EOF;

// Rule PatternModel
rulePatternModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternModelAccess().getElementsPatternInitializationParserRuleCall_0_0());
				}
				lv_elements_0_0=rulePatternInitialization
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternModelRule());
					}
					set(
						$current,
						"elements",
						lv_elements_0_0,
						"org.xtext.constraint.mydsl.MyDsl.PatternInitialization");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternModelAccess().getElementsQueryInitializationParserRuleCall_1_0());
				}
				lv_elements_1_0=ruleQueryInitialization
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternModelRule());
					}
					set(
						$current,
						"elements",
						lv_elements_1_0,
						"org.xtext.constraint.mydsl.MyDsl.QueryInitialization");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternModelAccess().getElementsComplexInitializationParserRuleCall_2_0());
				}
				lv_elements_2_0=ruleComplexInitialization
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternModelRule());
					}
					set(
						$current,
						"elements",
						lv_elements_2_0,
						"org.xtext.constraint.mydsl.MyDsl.ComplexInitialization");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleQueryInitialization
entryRuleQueryInitialization returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQueryInitializationRule()); }
	iv_ruleQueryInitialization=ruleQueryInitialization
	{ $current=$iv_ruleQueryInitialization.current; }
	EOF;

// Rule QueryInitialization
ruleQueryInitialization returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Initialize:'
		{
			newLeafNode(otherlv_0, grammarAccess.getQueryInitializationAccess().getInitializeKeyword_0());
		}
		otherlv_1='SimpleConstraint'
		{
			newLeafNode(otherlv_1, grammarAccess.getQueryInitializationAccess().getSimpleConstraintKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getQueryInitializationAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQueryInitializationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getQueryInitializationAccess().getTimeWindowTimeWindowParserRuleCall_3_0());
				}
				lv_timeWindow_3_0=ruleTimeWindow
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQueryInitializationRule());
					}
					set(
						$current,
						"timeWindow",
						lv_timeWindow_3_0,
						"org.xtext.constraint.mydsl.MyDsl.TimeWindow");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getQueryInitializationAccess().getLeftCurlyBracketKeyword_4());
		}
		otherlv_5='Event'
		{
			newLeafNode(otherlv_5, grammarAccess.getQueryInitializationAccess().getEventKeyword_5());
		}
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getQueryInitializationAccess().getLeftCurlyBracketKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQueryInitializationAccess().getInputStatementsInputStatementParserRuleCall_7_0());
				}
				lv_inputStatements_7_0=ruleInputStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQueryInitializationRule());
					}
					set(
						$current,
						"inputStatements",
						lv_inputStatements_7_0,
						"org.xtext.constraint.mydsl.MyDsl.InputStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getQueryInitializationAccess().getRightCurlyBracketKeyword_8());
		}
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getQueryInitializationAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRulePatternInitialization
entryRulePatternInitialization returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternInitializationRule()); }
	iv_rulePatternInitialization=rulePatternInitialization
	{ $current=$iv_rulePatternInitialization.current; }
	EOF;

// Rule PatternInitialization
rulePatternInitialization returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Initialize:'
		{
			newLeafNode(otherlv_0, grammarAccess.getPatternInitializationAccess().getInitializeKeyword_0());
		}
		otherlv_1='RealTimeConstraint'
		{
			newLeafNode(otherlv_1, grammarAccess.getPatternInitializationAccess().getRealTimeConstraintKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getPatternInitializationAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPatternInitializationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternInitializationAccess().getTimeWindowTimeWindowParserRuleCall_3_0());
				}
				lv_timeWindow_3_0=ruleTimeWindow
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternInitializationRule());
					}
					set(
						$current,
						"timeWindow",
						lv_timeWindow_3_0,
						"org.xtext.constraint.mydsl.MyDsl.TimeWindow");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getPatternInitializationAccess().getLeftCurlyBracketKeyword_4());
		}
		otherlv_5='Events'
		{
			newLeafNode(otherlv_5, grammarAccess.getPatternInitializationAccess().getEventsKeyword_5());
		}
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getPatternInitializationAccess().getLeftCurlyBracketKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternInitializationAccess().getInputStatementsInputStatementParserRuleCall_7_0());
				}
				lv_inputStatements_7_0=ruleInputStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternInitializationRule());
					}
					add(
						$current,
						"inputStatements",
						lv_inputStatements_7_0,
						"org.xtext.constraint.mydsl.MyDsl.InputStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getPatternInitializationAccess().getRightCurlyBracketKeyword_8());
		}
		otherlv_9='Pattern'
		{
			newLeafNode(otherlv_9, grammarAccess.getPatternInitializationAccess().getPatternKeyword_9());
		}
		otherlv_10='{'
		{
			newLeafNode(otherlv_10, grammarAccess.getPatternInitializationAccess().getLeftCurlyBracketKeyword_10());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternInitializationAccess().getPatternStatementsPatternStatementParserRuleCall_11_0());
				}
				lv_patternStatements_11_0=rulePatternStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternInitializationRule());
					}
					set(
						$current,
						"patternStatements",
						lv_patternStatements_11_0,
						"org.xtext.constraint.mydsl.MyDsl.PatternStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_12='}'
		{
			newLeafNode(otherlv_12, grammarAccess.getPatternInitializationAccess().getRightCurlyBracketKeyword_12());
		}
		otherlv_13='}'
		{
			newLeafNode(otherlv_13, grammarAccess.getPatternInitializationAccess().getRightCurlyBracketKeyword_13());
		}
	)
;

// Entry rule entryRuleComplexInitialization
entryRuleComplexInitialization returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComplexInitializationRule()); }
	iv_ruleComplexInitialization=ruleComplexInitialization
	{ $current=$iv_ruleComplexInitialization.current; }
	EOF;

// Rule ComplexInitialization
ruleComplexInitialization returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Initialize:'
		{
			newLeafNode(otherlv_0, grammarAccess.getComplexInitializationAccess().getInitializeKeyword_0());
		}
		otherlv_1='ComplexConstraint'
		{
			newLeafNode(otherlv_1, grammarAccess.getComplexInitializationAccess().getComplexConstraintKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getComplexInitializationAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComplexInitializationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComplexInitializationAccess().getTimeWindowTimeWindowParserRuleCall_3_0());
				}
				lv_timeWindow_3_0=ruleTimeWindow
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComplexInitializationRule());
					}
					set(
						$current,
						"timeWindow",
						lv_timeWindow_3_0,
						"org.xtext.constraint.mydsl.MyDsl.TimeWindow");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getComplexInitializationAccess().getLeftCurlyBracketKeyword_4());
		}
		otherlv_5='Events'
		{
			newLeafNode(otherlv_5, grammarAccess.getComplexInitializationAccess().getEventsKeyword_5());
		}
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getComplexInitializationAccess().getLeftCurlyBracketKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getComplexInitializationAccess().getInputStatementsInputStatementParserRuleCall_7_0());
				}
				lv_inputStatements_7_0=ruleInputStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComplexInitializationRule());
					}
					add(
						$current,
						"inputStatements",
						lv_inputStatements_7_0,
						"org.xtext.constraint.mydsl.MyDsl.InputStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getComplexInitializationAccess().getRightCurlyBracketKeyword_8());
		}
		otherlv_9='Pattern'
		{
			newLeafNode(otherlv_9, grammarAccess.getComplexInitializationAccess().getPatternKeyword_9());
		}
		otherlv_10='{'
		{
			newLeafNode(otherlv_10, grammarAccess.getComplexInitializationAccess().getLeftCurlyBracketKeyword_10());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getComplexInitializationAccess().getComplexPatternStatementsComplexPatternStatementsParserRuleCall_11_0());
				}
				lv_complexPatternStatements_11_0=ruleComplexPatternStatements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComplexInitializationRule());
					}
					set(
						$current,
						"complexPatternStatements",
						lv_complexPatternStatements_11_0,
						"org.xtext.constraint.mydsl.MyDsl.ComplexPatternStatements");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_12='}'
		{
			newLeafNode(otherlv_12, grammarAccess.getComplexInitializationAccess().getRightCurlyBracketKeyword_12());
		}
		otherlv_13='}'
		{
			newLeafNode(otherlv_13, grammarAccess.getComplexInitializationAccess().getRightCurlyBracketKeyword_13());
		}
	)
;

// Entry rule entryRuleComplexPatternStatements
entryRuleComplexPatternStatements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComplexPatternStatementsRule()); }
	iv_ruleComplexPatternStatements=ruleComplexPatternStatements
	{ $current=$iv_ruleComplexPatternStatements.current; }
	EOF;

// Rule ComplexPatternStatements
ruleComplexPatternStatements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='DefinePattern'
		{
			newLeafNode(otherlv_0, grammarAccess.getComplexPatternStatementsAccess().getDefinePatternKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getComplexPatternStatementsAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getComplexPatternStatementsAccess().getComplexPatternTypeComplexPatternTypeParserRuleCall_2_0());
				}
				lv_complexPatternType_2_0=ruleComplexPatternType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComplexPatternStatementsRule());
					}
					set(
						$current,
						"complexPatternType",
						lv_complexPatternType_2_0,
						"org.xtext.constraint.mydsl.MyDsl.ComplexPatternType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getComplexPatternStatementsAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleComplexPatternType
entryRuleComplexPatternType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComplexPatternTypeRule()); }
	iv_ruleComplexPatternType=ruleComplexPatternType
	{ $current=$iv_ruleComplexPatternType.current; }
	EOF;

// Rule ComplexPatternType
ruleComplexPatternType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComplexPatternTypeRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getComplexPatternTypeAccess().getFirstEventInputStatementCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1='Occurs'
			{
				newLeafNode(otherlv_1, grammarAccess.getComplexPatternTypeAccess().getOccursKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getComplexPatternTypeAccess().getGreedyQuantifiersGreedyQuantifiersEnumRuleCall_1_1_0());
					}
					lv_greedyQuantifiers_2_0=ruleGreedyQuantifiers
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComplexPatternTypeRule());
						}
						set(
							$current,
							"greedyQuantifiers",
							lv_greedyQuantifiers_2_0,
							"org.xtext.constraint.mydsl.MyDsl.GreedyQuantifiers");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getComplexPatternTypeAccess().getComplexPatternOptionsComplexPatternOptionsParserRuleCall_2_0());
				}
				lv_complexPatternOptions_3_0=ruleComplexPatternOptions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComplexPatternTypeRule());
					}
					add(
						$current,
						"complexPatternOptions",
						lv_complexPatternOptions_3_0,
						"org.xtext.constraint.mydsl.MyDsl.ComplexPatternOptions");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleComplexPatternOptions
entryRuleComplexPatternOptions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComplexPatternOptionsRule()); }
	iv_ruleComplexPatternOptions=ruleComplexPatternOptions
	{ $current=$iv_ruleComplexPatternOptions.current; }
	EOF;

// Rule ComplexPatternOptions
ruleComplexPatternOptions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='followed-by'
		{
			newLeafNode(otherlv_0, grammarAccess.getComplexPatternOptionsAccess().getFollowedByKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComplexPatternOptionsRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getComplexPatternOptionsAccess().getSeceondEventInputStatementCrossReference_1_0());
				}
			)
		)
		(
			otherlv_2='Occurs'
			{
				newLeafNode(otherlv_2, grammarAccess.getComplexPatternOptionsAccess().getOccursKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getComplexPatternOptionsAccess().getGreedyQuantifiersGreedyQuantifiersEnumRuleCall_2_1_0());
					}
					lv_greedyQuantifiers_3_0=ruleGreedyQuantifiers
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComplexPatternOptionsRule());
						}
						set(
							$current,
							"greedyQuantifiers",
							lv_greedyQuantifiers_3_0,
							"org.xtext.constraint.mydsl.MyDsl.GreedyQuantifiers");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleInputStatement
entryRuleInputStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputStatementRule()); }
	iv_ruleInputStatement=ruleInputStatement
	{ $current=$iv_ruleInputStatement.current; }
	EOF;

// Rule InputStatement
ruleInputStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='InputEvent'
		{
			newLeafNode(otherlv_0, grammarAccess.getInputStatementAccess().getInputEventKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getInputStatementAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInputStatementRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='as'
		{
			newLeafNode(otherlv_2, grammarAccess.getInputStatementAccess().getAsKeyword_2());
		}
		(
			(
				lv_Property_3_0=RULE_STRING
				{
					newLeafNode(lv_Property_3_0, grammarAccess.getInputStatementAccess().getPropertySTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInputStatementRule());
					}
					setWithLastConsumed(
						$current,
						"Property",
						lv_Property_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4='and'
		{
			newLeafNode(otherlv_4, grammarAccess.getInputStatementAccess().getAndKeyword_4());
		}
		otherlv_5='SetEvent'
		{
			newLeafNode(otherlv_5, grammarAccess.getInputStatementAccess().getSetEventKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInputStatementAccess().getComparisonOperatorComparisonOperatorEnumRuleCall_6_0());
				}
				lv_comparisonOperator_6_0=ruleComparisonOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInputStatementRule());
					}
					set(
						$current,
						"comparisonOperator",
						lv_comparisonOperator_6_0,
						"org.xtext.constraint.mydsl.MyDsl.ComparisonOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getInputStatementAccess().getValueValueOptionsParserRuleCall_7_0());
				}
				lv_value_7_0=ruleValueOptions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInputStatementRule());
					}
					set(
						$current,
						"value",
						lv_value_7_0,
						"org.xtext.constraint.mydsl.MyDsl.ValueOptions");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8=','
		{
			newLeafNode(otherlv_8, grammarAccess.getInputStatementAccess().getCommaKeyword_8());
		}
	)
;

// Entry rule entryRulePatternStatement
entryRulePatternStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternStatementRule()); }
	iv_rulePatternStatement=rulePatternStatement
	{ $current=$iv_rulePatternStatement.current; }
	EOF;

// Rule PatternStatement
rulePatternStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='DefinePattern'
		{
			newLeafNode(otherlv_0, grammarAccess.getPatternStatementAccess().getDefinePatternKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getPatternStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternStatementAccess().getPatternTypePatternTypeParserRuleCall_2_0());
				}
				lv_patternType_2_0=rulePatternType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternStatementRule());
					}
					set(
						$current,
						"patternType",
						lv_patternType_2_0,
						"org.xtext.constraint.mydsl.MyDsl.PatternType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getPatternStatementAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRulePatternType
entryRulePatternType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternTypeRule()); }
	iv_rulePatternType=rulePatternType
	{ $current=$iv_rulePatternType.current; }
	EOF;

// Rule PatternType
rulePatternType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPatternTypeRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getPatternTypeAccess().getFirstEventInputStatementCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternTypeAccess().getPatternOptionsPatternOptionsParserRuleCall_1_0());
				}
				lv_patternOptions_1_0=rulePatternOptions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternTypeRule());
					}
					add(
						$current,
						"patternOptions",
						lv_patternOptions_1_0,
						"org.xtext.constraint.mydsl.MyDsl.PatternOptions");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRulePatternOptions
entryRulePatternOptions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternOptionsRule()); }
	iv_rulePatternOptions=rulePatternOptions
	{ $current=$iv_rulePatternOptions.current; }
	EOF;

// Rule PatternOptions
rulePatternOptions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternOptionsAccess().getOccurenceAtLeastOccurenceAtLeastParserRuleCall_0_0());
				}
				lv_occurenceAtLeast_0_0=ruleOccurenceAtLeast
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternOptionsRule());
					}
					set(
						$current,
						"occurenceAtLeast",
						lv_occurenceAtLeast_0_0,
						"org.xtext.constraint.mydsl.MyDsl.OccurenceAtLeast");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternOptionsAccess().getOccurenceAtMostOccurenceAtMostParserRuleCall_1_0());
				}
				lv_occurenceAtMost_1_0=ruleOccurenceAtMost
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternOptionsRule());
					}
					set(
						$current,
						"occurenceAtMost",
						lv_occurenceAtMost_1_0,
						"org.xtext.constraint.mydsl.MyDsl.OccurenceAtMost");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternOptionsAccess().getOccurenceAtNotSpecificTimeOccurenceAtNotSpecificTimeParserRuleCall_2_0());
				}
				lv_occurenceAtNotSpecificTime_2_0=ruleOccurenceAtNotSpecificTime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternOptionsRule());
					}
					set(
						$current,
						"occurenceAtNotSpecificTime",
						lv_occurenceAtNotSpecificTime_2_0,
						"org.xtext.constraint.mydsl.MyDsl.OccurenceAtNotSpecificTime");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOccurenceAtLeast
entryRuleOccurenceAtLeast returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOccurenceAtLeastRule()); }
	iv_ruleOccurenceAtLeast=ruleOccurenceAtLeast
	{ $current=$iv_ruleOccurenceAtLeast.current; }
	EOF;

// Rule OccurenceAtLeast
ruleOccurenceAtLeast returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='followed-by'
		{
			newLeafNode(otherlv_0, grammarAccess.getOccurenceAtLeastAccess().getFollowedByKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOccurenceAtLeastRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getOccurenceAtLeastAccess().getSeceondEventInputStatementCrossReference_1_0());
				}
			)
		)
		otherlv_2='Occurs-After'
		{
			newLeafNode(otherlv_2, grammarAccess.getOccurenceAtLeastAccess().getOccursAfterKeyword_2());
		}
		otherlv_3='@'
		{
			newLeafNode(otherlv_3, grammarAccess.getOccurenceAtLeastAccess().getCommercialAtKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOccurenceAtLeastAccess().getMinDurationMinDurationParserRuleCall_4_0());
				}
				lv_minDuration_4_0=ruleMinDuration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOccurenceAtLeastRule());
					}
					set(
						$current,
						"minDuration",
						lv_minDuration_4_0,
						"org.xtext.constraint.mydsl.MyDsl.MinDuration");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOccurenceAtMost
entryRuleOccurenceAtMost returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOccurenceAtMostRule()); }
	iv_ruleOccurenceAtMost=ruleOccurenceAtMost
	{ $current=$iv_ruleOccurenceAtMost.current; }
	EOF;

// Rule OccurenceAtMost
ruleOccurenceAtMost returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='followed-by'
		{
			newLeafNode(otherlv_0, grammarAccess.getOccurenceAtMostAccess().getFollowedByKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOccurenceAtMostRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getOccurenceAtMostAccess().getSeceondEventInputStatementCrossReference_1_0());
				}
			)
		)
		otherlv_2='Occurs-Before'
		{
			newLeafNode(otherlv_2, grammarAccess.getOccurenceAtMostAccess().getOccursBeforeKeyword_2());
		}
		otherlv_3='@'
		{
			newLeafNode(otherlv_3, grammarAccess.getOccurenceAtMostAccess().getCommercialAtKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOccurenceAtMostAccess().getMaxDurationMaxDurationParserRuleCall_4_0());
				}
				lv_maxDuration_4_0=ruleMaxDuration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOccurenceAtMostRule());
					}
					set(
						$current,
						"maxDuration",
						lv_maxDuration_4_0,
						"org.xtext.constraint.mydsl.MyDsl.MaxDuration");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOccurenceAtNotSpecificTime
entryRuleOccurenceAtNotSpecificTime returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOccurenceAtNotSpecificTimeRule()); }
	iv_ruleOccurenceAtNotSpecificTime=ruleOccurenceAtNotSpecificTime
	{ $current=$iv_ruleOccurenceAtNotSpecificTime.current; }
	EOF;

// Rule OccurenceAtNotSpecificTime
ruleOccurenceAtNotSpecificTime returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='followed-by'
		{
			newLeafNode(otherlv_0, grammarAccess.getOccurenceAtNotSpecificTimeAccess().getFollowedByKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOccurenceAtNotSpecificTimeRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getOccurenceAtNotSpecificTimeAccess().getSeceondEventInputStatementCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleMaxDuration
entryRuleMaxDuration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMaxDurationRule()); }
	iv_ruleMaxDuration=ruleMaxDuration
	{ $current=$iv_ruleMaxDuration.current; }
	EOF;

// Rule MaxDuration
ruleMaxDuration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_timerType_0_0='MaxDuration'
				{
					newLeafNode(lv_timerType_0_0, grammarAccess.getMaxDurationAccess().getTimerTypeMaxDurationKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMaxDurationRule());
					}
					setWithLastConsumed($current, "timerType", lv_timerType_0_0, "MaxDuration");
				}
			)
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getMaxDurationAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				lv_time_2_0=RULE_INT
				{
					newLeafNode(lv_time_2_0, grammarAccess.getMaxDurationAccess().getTimeINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMaxDurationRule());
					}
					setWithLastConsumed(
						$current,
						"time",
						lv_time_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMaxDurationAccess().getTimeUnitTimeUnitEnumRuleCall_3_0());
				}
				lv_timeUnit_3_0=ruleTimeUnit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMaxDurationRule());
					}
					set(
						$current,
						"timeUnit",
						lv_timeUnit_3_0,
						"org.xtext.constraint.mydsl.MyDsl.TimeUnit");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getMaxDurationAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleMinDuration
entryRuleMinDuration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMinDurationRule()); }
	iv_ruleMinDuration=ruleMinDuration
	{ $current=$iv_ruleMinDuration.current; }
	EOF;

// Rule MinDuration
ruleMinDuration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_timerType_0_0='MinDuration'
				{
					newLeafNode(lv_timerType_0_0, grammarAccess.getMinDurationAccess().getTimerTypeMinDurationKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMinDurationRule());
					}
					setWithLastConsumed($current, "timerType", lv_timerType_0_0, "MinDuration");
				}
			)
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getMinDurationAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				lv_time_2_0=RULE_INT
				{
					newLeafNode(lv_time_2_0, grammarAccess.getMinDurationAccess().getTimeINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMinDurationRule());
					}
					setWithLastConsumed(
						$current,
						"time",
						lv_time_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMinDurationAccess().getTimeUnitTimeUnitEnumRuleCall_3_0());
				}
				lv_timeUnit_3_0=ruleTimeUnit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMinDurationRule());
					}
					set(
						$current,
						"timeUnit",
						lv_timeUnit_3_0,
						"org.xtext.constraint.mydsl.MyDsl.TimeUnit");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getMinDurationAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleTimeWindow
entryRuleTimeWindow returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeWindowRule()); }
	iv_ruleTimeWindow=ruleTimeWindow
	{ $current=$iv_ruleTimeWindow.current; }
	EOF;

// Rule TimeWindow
ruleTimeWindow returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='With'
		{
			newLeafNode(otherlv_0, grammarAccess.getTimeWindowAccess().getWithKeyword_0());
		}
		otherlv_1='TimeWindow'
		{
			newLeafNode(otherlv_1, grammarAccess.getTimeWindowAccess().getTimeWindowKeyword_1());
		}
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getTimeWindowAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				lv_time_3_0=RULE_INT
				{
					newLeafNode(lv_time_3_0, grammarAccess.getTimeWindowAccess().getTimeINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeWindowRule());
					}
					setWithLastConsumed(
						$current,
						"time",
						lv_time_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTimeWindowAccess().getTimeUnitTimeUnitEnumRuleCall_4_0());
				}
				lv_timeUnit_4_0=ruleTimeUnit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimeWindowRule());
					}
					set(
						$current,
						"timeUnit",
						lv_timeUnit_4_0,
						"org.xtext.constraint.mydsl.MyDsl.TimeUnit");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getTimeWindowAccess().getRightSquareBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleValueOptions
entryRuleValueOptions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueOptionsRule()); }
	iv_ruleValueOptions=ruleValueOptions
	{ $current=$iv_ruleValueOptions.current; }
	EOF;

// Rule ValueOptions
ruleValueOptions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getValueOptionsAccess().getStringLiteralStringLiteralParserRuleCall_0_0());
				}
				lv_stringLiteral_0_0=ruleStringLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueOptionsRule());
					}
					set(
						$current,
						"stringLiteral",
						lv_stringLiteral_0_0,
						"org.xtext.constraint.mydsl.MyDsl.StringLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getValueOptionsAccess().getNumberLiteralNumberLiteralParserRuleCall_1_0());
				}
				lv_numberLiteral_1_0=ruleNumberLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueOptionsRule());
					}
					set(
						$current,
						"numberLiteral",
						lv_numberLiteral_1_0,
						"org.xtext.constraint.mydsl.MyDsl.NumberLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getValueOptionsAccess().getTextLiteralTextLiteralParserRuleCall_2_0());
				}
				lv_textLiteral_2_0=ruleTextLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueOptionsRule());
					}
					set(
						$current,
						"textLiteral",
						lv_textLiteral_2_0,
						"org.xtext.constraint.mydsl.MyDsl.TextLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	iv_ruleStringLiteral=ruleStringLiteral
	{ $current=$iv_ruleStringLiteral.current; }
	EOF;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberLiteralRule()); }
	iv_ruleNumberLiteral=ruleNumberLiteral
	{ $current=$iv_ruleNumberLiteral.current; }
	EOF;

// Rule NumberLiteral
ruleNumberLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_0=RULE_INT
				{
					newLeafNode(lv_value_0_0, grammarAccess.getNumberLiteralAccess().getValueINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumberLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getNumberLiteralAccess().getFullStopKeyword_1_0());
			}
			this_INT_2=RULE_INT
			{
				newLeafNode(this_INT_2, grammarAccess.getNumberLiteralAccess().getINTTerminalRuleCall_1_1());
			}
		)?
	)
;

// Entry rule entryRuleTextLiteral
entryRuleTextLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTextLiteralRule()); }
	iv_ruleTextLiteral=ruleTextLiteral
	{ $current=$iv_ruleTextLiteral.current; }
	EOF;

// Rule TextLiteral
ruleTextLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_ID
			{
				newLeafNode(lv_value_0_0, grammarAccess.getTextLiteralAccess().getValueIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getTextLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Rule ComparisonOperator
ruleComparisonOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='='
			{
				$current = grammarAccess.getComparisonOperatorAccess().getEqualEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getComparisonOperatorAccess().getEqualEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='!='
			{
				$current = grammarAccess.getComparisonOperatorAccess().getNotEqualEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getComparisonOperatorAccess().getNotEqualEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='>'
			{
				$current = grammarAccess.getComparisonOperatorAccess().getBiggerThanEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getComparisonOperatorAccess().getBiggerThanEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='<'
			{
				$current = grammarAccess.getComparisonOperatorAccess().getLessThanEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getComparisonOperatorAccess().getLessThanEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='=<'
			{
				$current = grammarAccess.getComparisonOperatorAccess().getLessThanOrEqualEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getComparisonOperatorAccess().getLessThanOrEqualEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='=>'
			{
				$current = grammarAccess.getComparisonOperatorAccess().getBiggerThanOrEqualEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getComparisonOperatorAccess().getBiggerThanOrEqualEnumLiteralDeclaration_5());
			}
		)
	)
;

// Rule TimeUnit
ruleTimeUnit returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='microseconds'
			{
				$current = grammarAccess.getTimeUnitAccess().getMicroSecondsEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTimeUnitAccess().getMicroSecondsEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='milliseconds'
			{
				$current = grammarAccess.getTimeUnitAccess().getMilliSecondsEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTimeUnitAccess().getMilliSecondsEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='seconds'
			{
				$current = grammarAccess.getTimeUnitAccess().getSecondsEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTimeUnitAccess().getSecondsEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='minute'
			{
				$current = grammarAccess.getTimeUnitAccess().getMinuteEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getTimeUnitAccess().getMinuteEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='hour'
			{
				$current = grammarAccess.getTimeUnitAccess().getHourEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getTimeUnitAccess().getHourEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='day'
			{
				$current = grammarAccess.getTimeUnitAccess().getDayEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getTimeUnitAccess().getDayEnumLiteralDeclaration_5());
			}
		)
	)
;

// Rule GreedyQuantifiers
ruleGreedyQuantifiers returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Once'
			{
				$current = grammarAccess.getGreedyQuantifiersAccess().getOnceEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getGreedyQuantifiersAccess().getOnceEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='ZeroOrMore'
			{
				$current = grammarAccess.getGreedyQuantifiersAccess().getZeroOrMoreEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getGreedyQuantifiersAccess().getZeroOrMoreEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='OneOrMore'
			{
				$current = grammarAccess.getGreedyQuantifiersAccess().getOneOrMoreEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getGreedyQuantifiersAccess().getOneOrMoreEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='ZeroOrOne'
			{
				$current = grammarAccess.getGreedyQuantifiersAccess().getZeroOrOneEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getGreedyQuantifiersAccess().getZeroOrOneEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
