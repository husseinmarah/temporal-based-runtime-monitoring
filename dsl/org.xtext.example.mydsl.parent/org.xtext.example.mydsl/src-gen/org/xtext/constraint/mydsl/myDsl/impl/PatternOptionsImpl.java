/**
 * generated by Xtext 2.26.0-SNAPSHOT
 */
package org.xtext.constraint.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.constraint.mydsl.myDsl.MyDslPackage;
import org.xtext.constraint.mydsl.myDsl.OccurenceAtLeast;
import org.xtext.constraint.mydsl.myDsl.OccurenceAtMost;
import org.xtext.constraint.mydsl.myDsl.OccurenceAtNotSpecificTime;
import org.xtext.constraint.mydsl.myDsl.PatternOptions;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Pattern Options</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.constraint.mydsl.myDsl.impl.PatternOptionsImpl#getOccurenceAtLeast <em>Occurence At Least</em>}</li>
 *   <li>{@link org.xtext.constraint.mydsl.myDsl.impl.PatternOptionsImpl#getOccurenceAtMost <em>Occurence At Most</em>}</li>
 *   <li>{@link org.xtext.constraint.mydsl.myDsl.impl.PatternOptionsImpl#getOccurenceAtNotSpecificTime <em>Occurence At Not Specific Time</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PatternOptionsImpl extends MinimalEObjectImpl.Container implements PatternOptions
{
  /**
   * The cached value of the '{@link #getOccurenceAtLeast() <em>Occurence At Least</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOccurenceAtLeast()
   * @generated
   * @ordered
   */
  protected OccurenceAtLeast occurenceAtLeast;

  /**
   * The cached value of the '{@link #getOccurenceAtMost() <em>Occurence At Most</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOccurenceAtMost()
   * @generated
   * @ordered
   */
  protected OccurenceAtMost occurenceAtMost;

  /**
   * The cached value of the '{@link #getOccurenceAtNotSpecificTime() <em>Occurence At Not Specific Time</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOccurenceAtNotSpecificTime()
   * @generated
   * @ordered
   */
  protected OccurenceAtNotSpecificTime occurenceAtNotSpecificTime;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PatternOptionsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.PATTERN_OPTIONS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OccurenceAtLeast getOccurenceAtLeast()
  {
    return occurenceAtLeast;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOccurenceAtLeast(OccurenceAtLeast newOccurenceAtLeast, NotificationChain msgs)
  {
    OccurenceAtLeast oldOccurenceAtLeast = occurenceAtLeast;
    occurenceAtLeast = newOccurenceAtLeast;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_LEAST, oldOccurenceAtLeast, newOccurenceAtLeast);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOccurenceAtLeast(OccurenceAtLeast newOccurenceAtLeast)
  {
    if (newOccurenceAtLeast != occurenceAtLeast)
    {
      NotificationChain msgs = null;
      if (occurenceAtLeast != null)
        msgs = ((InternalEObject)occurenceAtLeast).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_LEAST, null, msgs);
      if (newOccurenceAtLeast != null)
        msgs = ((InternalEObject)newOccurenceAtLeast).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_LEAST, null, msgs);
      msgs = basicSetOccurenceAtLeast(newOccurenceAtLeast, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_LEAST, newOccurenceAtLeast, newOccurenceAtLeast));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OccurenceAtMost getOccurenceAtMost()
  {
    return occurenceAtMost;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOccurenceAtMost(OccurenceAtMost newOccurenceAtMost, NotificationChain msgs)
  {
    OccurenceAtMost oldOccurenceAtMost = occurenceAtMost;
    occurenceAtMost = newOccurenceAtMost;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_MOST, oldOccurenceAtMost, newOccurenceAtMost);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOccurenceAtMost(OccurenceAtMost newOccurenceAtMost)
  {
    if (newOccurenceAtMost != occurenceAtMost)
    {
      NotificationChain msgs = null;
      if (occurenceAtMost != null)
        msgs = ((InternalEObject)occurenceAtMost).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_MOST, null, msgs);
      if (newOccurenceAtMost != null)
        msgs = ((InternalEObject)newOccurenceAtMost).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_MOST, null, msgs);
      msgs = basicSetOccurenceAtMost(newOccurenceAtMost, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_MOST, newOccurenceAtMost, newOccurenceAtMost));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OccurenceAtNotSpecificTime getOccurenceAtNotSpecificTime()
  {
    return occurenceAtNotSpecificTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOccurenceAtNotSpecificTime(OccurenceAtNotSpecificTime newOccurenceAtNotSpecificTime, NotificationChain msgs)
  {
    OccurenceAtNotSpecificTime oldOccurenceAtNotSpecificTime = occurenceAtNotSpecificTime;
    occurenceAtNotSpecificTime = newOccurenceAtNotSpecificTime;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_NOT_SPECIFIC_TIME, oldOccurenceAtNotSpecificTime, newOccurenceAtNotSpecificTime);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOccurenceAtNotSpecificTime(OccurenceAtNotSpecificTime newOccurenceAtNotSpecificTime)
  {
    if (newOccurenceAtNotSpecificTime != occurenceAtNotSpecificTime)
    {
      NotificationChain msgs = null;
      if (occurenceAtNotSpecificTime != null)
        msgs = ((InternalEObject)occurenceAtNotSpecificTime).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_NOT_SPECIFIC_TIME, null, msgs);
      if (newOccurenceAtNotSpecificTime != null)
        msgs = ((InternalEObject)newOccurenceAtNotSpecificTime).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_NOT_SPECIFIC_TIME, null, msgs);
      msgs = basicSetOccurenceAtNotSpecificTime(newOccurenceAtNotSpecificTime, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_NOT_SPECIFIC_TIME, newOccurenceAtNotSpecificTime, newOccurenceAtNotSpecificTime));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_LEAST:
        return basicSetOccurenceAtLeast(null, msgs);
      case MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_MOST:
        return basicSetOccurenceAtMost(null, msgs);
      case MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_NOT_SPECIFIC_TIME:
        return basicSetOccurenceAtNotSpecificTime(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_LEAST:
        return getOccurenceAtLeast();
      case MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_MOST:
        return getOccurenceAtMost();
      case MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_NOT_SPECIFIC_TIME:
        return getOccurenceAtNotSpecificTime();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_LEAST:
        setOccurenceAtLeast((OccurenceAtLeast)newValue);
        return;
      case MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_MOST:
        setOccurenceAtMost((OccurenceAtMost)newValue);
        return;
      case MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_NOT_SPECIFIC_TIME:
        setOccurenceAtNotSpecificTime((OccurenceAtNotSpecificTime)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_LEAST:
        setOccurenceAtLeast((OccurenceAtLeast)null);
        return;
      case MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_MOST:
        setOccurenceAtMost((OccurenceAtMost)null);
        return;
      case MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_NOT_SPECIFIC_TIME:
        setOccurenceAtNotSpecificTime((OccurenceAtNotSpecificTime)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_LEAST:
        return occurenceAtLeast != null;
      case MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_MOST:
        return occurenceAtMost != null;
      case MyDslPackage.PATTERN_OPTIONS__OCCURENCE_AT_NOT_SPECIFIC_TIME:
        return occurenceAtNotSpecificTime != null;
    }
    return super.eIsSet(featureID);
  }

} //PatternOptionsImpl
