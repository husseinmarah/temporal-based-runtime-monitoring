/**
 * generated by Xtext 2.26.0-SNAPSHOT
 */
package org.xtext.constraint.mydsl.myDsl.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.constraint.mydsl.myDsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.constraint.mydsl.myDsl.MyDslPackage
 * @generated
 */
public class MyDslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MyDslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = MyDslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case MyDslPackage.PATTERN_MODEL:
      {
        PatternModel patternModel = (PatternModel)theEObject;
        T result = casePatternModel(patternModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.QUERY_INITIALIZATION:
      {
        QueryInitialization queryInitialization = (QueryInitialization)theEObject;
        T result = caseQueryInitialization(queryInitialization);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PATTERN_INITIALIZATION:
      {
        PatternInitialization patternInitialization = (PatternInitialization)theEObject;
        T result = casePatternInitialization(patternInitialization);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.COMPLEX_INITIALIZATION:
      {
        ComplexInitialization complexInitialization = (ComplexInitialization)theEObject;
        T result = caseComplexInitialization(complexInitialization);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.COMPLEX_PATTERN_STATEMENTS:
      {
        ComplexPatternStatements complexPatternStatements = (ComplexPatternStatements)theEObject;
        T result = caseComplexPatternStatements(complexPatternStatements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.COMPLEX_PATTERN_TYPE:
      {
        ComplexPatternType complexPatternType = (ComplexPatternType)theEObject;
        T result = caseComplexPatternType(complexPatternType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.COMPLEX_PATTERN_OPTIONS:
      {
        ComplexPatternOptions complexPatternOptions = (ComplexPatternOptions)theEObject;
        T result = caseComplexPatternOptions(complexPatternOptions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INPUT_STATEMENT:
      {
        InputStatement inputStatement = (InputStatement)theEObject;
        T result = caseInputStatement(inputStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PATTERN_STATEMENT:
      {
        PatternStatement patternStatement = (PatternStatement)theEObject;
        T result = casePatternStatement(patternStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PATTERN_TYPE:
      {
        PatternType patternType = (PatternType)theEObject;
        T result = casePatternType(patternType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PATTERN_OPTIONS:
      {
        PatternOptions patternOptions = (PatternOptions)theEObject;
        T result = casePatternOptions(patternOptions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OCCURENCE_AT_TIME:
      {
        OccurenceAtTime occurenceAtTime = (OccurenceAtTime)theEObject;
        T result = caseOccurenceAtTime(occurenceAtTime);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OCCURENCE_AT_LEAST:
      {
        OccurenceAtLeast occurenceAtLeast = (OccurenceAtLeast)theEObject;
        T result = caseOccurenceAtLeast(occurenceAtLeast);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OCCURENCE_AT_MOST:
      {
        OccurenceAtMost occurenceAtMost = (OccurenceAtMost)theEObject;
        T result = caseOccurenceAtMost(occurenceAtMost);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OCCURENCE_AT_NOT_SPECIFIC_TIME:
      {
        OccurenceAtNotSpecificTime occurenceAtNotSpecificTime = (OccurenceAtNotSpecificTime)theEObject;
        T result = caseOccurenceAtNotSpecificTime(occurenceAtNotSpecificTime);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TIMER:
      {
        Timer timer = (Timer)theEObject;
        T result = caseTimer(timer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.MAX_DURATION:
      {
        MaxDuration maxDuration = (MaxDuration)theEObject;
        T result = caseMaxDuration(maxDuration);
        if (result == null) result = caseTimer(maxDuration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.MIN_DURATION:
      {
        MinDuration minDuration = (MinDuration)theEObject;
        T result = caseMinDuration(minDuration);
        if (result == null) result = caseTimer(minDuration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TIME_WINDOW:
      {
        TimeWindow timeWindow = (TimeWindow)theEObject;
        T result = caseTimeWindow(timeWindow);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.VALUE_OPTIONS:
      {
        ValueOptions valueOptions = (ValueOptions)theEObject;
        T result = caseValueOptions(valueOptions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STRING_LITERAL:
      {
        StringLiteral stringLiteral = (StringLiteral)theEObject;
        T result = caseStringLiteral(stringLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.NUMBER_LITERAL:
      {
        NumberLiteral numberLiteral = (NumberLiteral)theEObject;
        T result = caseNumberLiteral(numberLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TEXT_LITERAL:
      {
        TextLiteral textLiteral = (TextLiteral)theEObject;
        T result = caseTextLiteral(textLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternModel(PatternModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Query Initialization</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Query Initialization</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQueryInitialization(QueryInitialization object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Initialization</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Initialization</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternInitialization(PatternInitialization object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Complex Initialization</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Complex Initialization</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComplexInitialization(ComplexInitialization object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Complex Pattern Statements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Complex Pattern Statements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComplexPatternStatements(ComplexPatternStatements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Complex Pattern Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Complex Pattern Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComplexPatternType(ComplexPatternType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Complex Pattern Options</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Complex Pattern Options</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComplexPatternOptions(ComplexPatternOptions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Input Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Input Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInputStatement(InputStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternStatement(PatternStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternType(PatternType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Options</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Options</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternOptions(PatternOptions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Occurence At Time</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Occurence At Time</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOccurenceAtTime(OccurenceAtTime object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Occurence At Least</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Occurence At Least</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOccurenceAtLeast(OccurenceAtLeast object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Occurence At Most</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Occurence At Most</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOccurenceAtMost(OccurenceAtMost object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Occurence At Not Specific Time</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Occurence At Not Specific Time</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOccurenceAtNotSpecificTime(OccurenceAtNotSpecificTime object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Timer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Timer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimer(Timer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Max Duration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Max Duration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMaxDuration(MaxDuration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Min Duration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Min Duration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMinDuration(MinDuration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Time Window</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Time Window</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimeWindow(TimeWindow object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Value Options</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Value Options</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValueOptions(ValueOptions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringLiteral(StringLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Number Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Number Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumberLiteral(NumberLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Text Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Text Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTextLiteral(TextLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //MyDslSwitch
