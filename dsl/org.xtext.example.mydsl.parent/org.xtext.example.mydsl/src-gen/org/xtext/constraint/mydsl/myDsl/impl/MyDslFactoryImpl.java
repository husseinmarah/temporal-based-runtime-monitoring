/**
 * generated by Xtext 2.26.0-SNAPSHOT
 */
package org.xtext.constraint.mydsl.myDsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.constraint.mydsl.myDsl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyDslFactoryImpl extends EFactoryImpl implements MyDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MyDslFactory init()
  {
    try
    {
      MyDslFactory theMyDslFactory = (MyDslFactory)EPackage.Registry.INSTANCE.getEFactory(MyDslPackage.eNS_URI);
      if (theMyDslFactory != null)
      {
        return theMyDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MyDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MyDslPackage.PATTERN_MODEL: return createPatternModel();
      case MyDslPackage.QUERY_INITIALIZATION: return createQueryInitialization();
      case MyDslPackage.PATTERN_INITIALIZATION: return createPatternInitialization();
      case MyDslPackage.COMPLEX_INITIALIZATION: return createComplexInitialization();
      case MyDslPackage.COMPLEX_PATTERN_STATEMENTS: return createComplexPatternStatements();
      case MyDslPackage.COMPLEX_PATTERN_TYPE: return createComplexPatternType();
      case MyDslPackage.COMPLEX_PATTERN_OPTIONS: return createComplexPatternOptions();
      case MyDslPackage.INPUT_STATEMENT: return createInputStatement();
      case MyDslPackage.PATTERN_STATEMENT: return createPatternStatement();
      case MyDslPackage.PATTERN_TYPE: return createPatternType();
      case MyDslPackage.PATTERN_OPTIONS: return createPatternOptions();
      case MyDslPackage.OCCURENCE_AT_TIME: return createOccurenceAtTime();
      case MyDslPackage.OCCURENCE_AT_LEAST: return createOccurenceAtLeast();
      case MyDslPackage.OCCURENCE_AT_MOST: return createOccurenceAtMost();
      case MyDslPackage.OCCURENCE_AT_NOT_SPECIFIC_TIME: return createOccurenceAtNotSpecificTime();
      case MyDslPackage.TIMER: return createTimer();
      case MyDslPackage.MAX_DURATION: return createMaxDuration();
      case MyDslPackage.MIN_DURATION: return createMinDuration();
      case MyDslPackage.TIME_WINDOW: return createTimeWindow();
      case MyDslPackage.VALUE_OPTIONS: return createValueOptions();
      case MyDslPackage.STRING_LITERAL: return createStringLiteral();
      case MyDslPackage.NUMBER_LITERAL: return createNumberLiteral();
      case MyDslPackage.TEXT_LITERAL: return createTextLiteral();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MyDslPackage.COMPARISON_OPERATOR:
        return createComparisonOperatorFromString(eDataType, initialValue);
      case MyDslPackage.TIME_UNIT:
        return createTimeUnitFromString(eDataType, initialValue);
      case MyDslPackage.GREEDY_QUANTIFIERS:
        return createGreedyQuantifiersFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MyDslPackage.COMPARISON_OPERATOR:
        return convertComparisonOperatorToString(eDataType, instanceValue);
      case MyDslPackage.TIME_UNIT:
        return convertTimeUnitToString(eDataType, instanceValue);
      case MyDslPackage.GREEDY_QUANTIFIERS:
        return convertGreedyQuantifiersToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PatternModel createPatternModel()
  {
    PatternModelImpl patternModel = new PatternModelImpl();
    return patternModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QueryInitialization createQueryInitialization()
  {
    QueryInitializationImpl queryInitialization = new QueryInitializationImpl();
    return queryInitialization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PatternInitialization createPatternInitialization()
  {
    PatternInitializationImpl patternInitialization = new PatternInitializationImpl();
    return patternInitialization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComplexInitialization createComplexInitialization()
  {
    ComplexInitializationImpl complexInitialization = new ComplexInitializationImpl();
    return complexInitialization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComplexPatternStatements createComplexPatternStatements()
  {
    ComplexPatternStatementsImpl complexPatternStatements = new ComplexPatternStatementsImpl();
    return complexPatternStatements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComplexPatternType createComplexPatternType()
  {
    ComplexPatternTypeImpl complexPatternType = new ComplexPatternTypeImpl();
    return complexPatternType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComplexPatternOptions createComplexPatternOptions()
  {
    ComplexPatternOptionsImpl complexPatternOptions = new ComplexPatternOptionsImpl();
    return complexPatternOptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InputStatement createInputStatement()
  {
    InputStatementImpl inputStatement = new InputStatementImpl();
    return inputStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PatternStatement createPatternStatement()
  {
    PatternStatementImpl patternStatement = new PatternStatementImpl();
    return patternStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PatternType createPatternType()
  {
    PatternTypeImpl patternType = new PatternTypeImpl();
    return patternType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PatternOptions createPatternOptions()
  {
    PatternOptionsImpl patternOptions = new PatternOptionsImpl();
    return patternOptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OccurenceAtTime createOccurenceAtTime()
  {
    OccurenceAtTimeImpl occurenceAtTime = new OccurenceAtTimeImpl();
    return occurenceAtTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OccurenceAtLeast createOccurenceAtLeast()
  {
    OccurenceAtLeastImpl occurenceAtLeast = new OccurenceAtLeastImpl();
    return occurenceAtLeast;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OccurenceAtMost createOccurenceAtMost()
  {
    OccurenceAtMostImpl occurenceAtMost = new OccurenceAtMostImpl();
    return occurenceAtMost;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OccurenceAtNotSpecificTime createOccurenceAtNotSpecificTime()
  {
    OccurenceAtNotSpecificTimeImpl occurenceAtNotSpecificTime = new OccurenceAtNotSpecificTimeImpl();
    return occurenceAtNotSpecificTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Timer createTimer()
  {
    TimerImpl timer = new TimerImpl();
    return timer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MaxDuration createMaxDuration()
  {
    MaxDurationImpl maxDuration = new MaxDurationImpl();
    return maxDuration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MinDuration createMinDuration()
  {
    MinDurationImpl minDuration = new MinDurationImpl();
    return minDuration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimeWindow createTimeWindow()
  {
    TimeWindowImpl timeWindow = new TimeWindowImpl();
    return timeWindow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ValueOptions createValueOptions()
  {
    ValueOptionsImpl valueOptions = new ValueOptionsImpl();
    return valueOptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringLiteral createStringLiteral()
  {
    StringLiteralImpl stringLiteral = new StringLiteralImpl();
    return stringLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumberLiteral createNumberLiteral()
  {
    NumberLiteralImpl numberLiteral = new NumberLiteralImpl();
    return numberLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TextLiteral createTextLiteral()
  {
    TextLiteralImpl textLiteral = new TextLiteralImpl();
    return textLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComparisonOperator createComparisonOperatorFromString(EDataType eDataType, String initialValue)
  {
    ComparisonOperator result = ComparisonOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertComparisonOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TimeUnit createTimeUnitFromString(EDataType eDataType, String initialValue)
  {
    TimeUnit result = TimeUnit.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTimeUnitToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GreedyQuantifiers createGreedyQuantifiersFromString(EDataType eDataType, String initialValue)
  {
    GreedyQuantifiers result = GreedyQuantifiers.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertGreedyQuantifiersToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MyDslPackage getMyDslPackage()
  {
    return (MyDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MyDslPackage getPackage()
  {
    return MyDslPackage.eINSTANCE;
  }

} //MyDslFactoryImpl
