/**
 * generated by Xtext 2.26.0-SNAPSHOT
 */
package org.xtext.constraint.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.constraint.mydsl.myDsl.MaxDuration;
import org.xtext.constraint.mydsl.myDsl.MinDuration;
import org.xtext.constraint.mydsl.myDsl.MyDslPackage;
import org.xtext.constraint.mydsl.myDsl.OccurenceAtTime;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Occurence At Time</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.constraint.mydsl.myDsl.impl.OccurenceAtTimeImpl#getMinDuration <em>Min Duration</em>}</li>
 *   <li>{@link org.xtext.constraint.mydsl.myDsl.impl.OccurenceAtTimeImpl#getMaxDuration <em>Max Duration</em>}</li>
 * </ul>
 *
 * @generated
 */
public class OccurenceAtTimeImpl extends MinimalEObjectImpl.Container implements OccurenceAtTime
{
  /**
   * The cached value of the '{@link #getMinDuration() <em>Min Duration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinDuration()
   * @generated
   * @ordered
   */
  protected MinDuration minDuration;

  /**
   * The cached value of the '{@link #getMaxDuration() <em>Max Duration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxDuration()
   * @generated
   * @ordered
   */
  protected MaxDuration maxDuration;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OccurenceAtTimeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.OCCURENCE_AT_TIME;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MinDuration getMinDuration()
  {
    return minDuration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMinDuration(MinDuration newMinDuration, NotificationChain msgs)
  {
    MinDuration oldMinDuration = minDuration;
    minDuration = newMinDuration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.OCCURENCE_AT_TIME__MIN_DURATION, oldMinDuration, newMinDuration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMinDuration(MinDuration newMinDuration)
  {
    if (newMinDuration != minDuration)
    {
      NotificationChain msgs = null;
      if (minDuration != null)
        msgs = ((InternalEObject)minDuration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.OCCURENCE_AT_TIME__MIN_DURATION, null, msgs);
      if (newMinDuration != null)
        msgs = ((InternalEObject)newMinDuration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.OCCURENCE_AT_TIME__MIN_DURATION, null, msgs);
      msgs = basicSetMinDuration(newMinDuration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.OCCURENCE_AT_TIME__MIN_DURATION, newMinDuration, newMinDuration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MaxDuration getMaxDuration()
  {
    return maxDuration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMaxDuration(MaxDuration newMaxDuration, NotificationChain msgs)
  {
    MaxDuration oldMaxDuration = maxDuration;
    maxDuration = newMaxDuration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.OCCURENCE_AT_TIME__MAX_DURATION, oldMaxDuration, newMaxDuration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMaxDuration(MaxDuration newMaxDuration)
  {
    if (newMaxDuration != maxDuration)
    {
      NotificationChain msgs = null;
      if (maxDuration != null)
        msgs = ((InternalEObject)maxDuration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.OCCURENCE_AT_TIME__MAX_DURATION, null, msgs);
      if (newMaxDuration != null)
        msgs = ((InternalEObject)newMaxDuration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.OCCURENCE_AT_TIME__MAX_DURATION, null, msgs);
      msgs = basicSetMaxDuration(newMaxDuration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.OCCURENCE_AT_TIME__MAX_DURATION, newMaxDuration, newMaxDuration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.OCCURENCE_AT_TIME__MIN_DURATION:
        return basicSetMinDuration(null, msgs);
      case MyDslPackage.OCCURENCE_AT_TIME__MAX_DURATION:
        return basicSetMaxDuration(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.OCCURENCE_AT_TIME__MIN_DURATION:
        return getMinDuration();
      case MyDslPackage.OCCURENCE_AT_TIME__MAX_DURATION:
        return getMaxDuration();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.OCCURENCE_AT_TIME__MIN_DURATION:
        setMinDuration((MinDuration)newValue);
        return;
      case MyDslPackage.OCCURENCE_AT_TIME__MAX_DURATION:
        setMaxDuration((MaxDuration)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.OCCURENCE_AT_TIME__MIN_DURATION:
        setMinDuration((MinDuration)null);
        return;
      case MyDslPackage.OCCURENCE_AT_TIME__MAX_DURATION:
        setMaxDuration((MaxDuration)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.OCCURENCE_AT_TIME__MIN_DURATION:
        return minDuration != null;
      case MyDslPackage.OCCURENCE_AT_TIME__MAX_DURATION:
        return maxDuration != null;
    }
    return super.eIsSet(featureID);
  }

} //OccurenceAtTimeImpl
